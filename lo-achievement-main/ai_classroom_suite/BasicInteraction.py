# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/blocher_basic_interaction.ipynb.

# %% auto 0
__all__ = ['get_tutor_reply', 'get_conversation_history', 'initialize_mdl_wrapper']

# %% ../nbs/blocher_basic_interaction.ipynb 7
import os
import gradio as gr
from .UIBaseComponents import *

# %% ../nbs/blocher_basic_interaction.ipynb 10
def get_tutor_reply(chat_tutor): 
  chat_tutor.get_direct_tutor_reply()
  return gr.update(value="", interactive=True), chat_tutor.conversation_memory, chat_tutor

def get_conversation_history(chat_tutor):
    return chat_tutor.conversation_memory, chat_tutor

def initialize_mdl_wrapper(chat_tutor, openai_auth=None, **mdl_chain_kwargs):
  
  if 'OPENAI_API_KEY' not in os.environ.keys() or not os.environ.get("OPENAI_API_KEY"):
      #print('Nope')
      gr.Error('This app will not run successfully without an OPENAI_API_KEY as an environment variable. Please contact your administrator \
                and tell them to set the OPENAI_API_KEY environment variable.')
    
  if 'SECRET_PROMPT' not in os.environ.keys() or not os.environ.get("SECRET_PROMPT"):
      #print('Nada')
      gr.Warning('Your app currently does not have a System Message. Please contact your administrator \
                  and tell them to set the System Message.')
        
  chat_tutor.value = initialize_basic_model(chat_tutor.value, openai_auth=openai_auth, **mdl_chain_kwargs)

  if chat_tutor.value.tutor_chain is None:
     gr.Warning('Your model seems to have failed to initialize. Did you set the OPENAI_API_KEY environment variable?')

  return chat_tutor

# %% ../nbs/blocher_basic_interaction.ipynb 14
### User Interfaces ###
with gr.Blocks() as BasicInteractionDemo:
    #initialize tutor (with state)
    study_tutor = gr.State(SlightlyDelusionalTutor())

    if 'SECRET_PROMPT' in os.environ:
        study_tutor.value.set_system_message(os.environ.get("SECRET_PROMPT"))

    # Student chatbot interface
    gr.Markdown("""
    ## Chat with the Model
    Description here
    """)
    
    """
    API Authentication functionality
    Instead of ask students to provide key, the key is now provided by the instructor. 
    To permanently set the key, go to Settings -> Variables and secrets -> Secrets, 
    then replace OPENAI_API_KEY value with whatever openai key of the instructor.
    """
    api_input = gr.Textbox(show_label=False, type="password", value=os.environ.get("OPENAI_API_KEY"), visible=False)

    # The instructor will provide a secret prompt/persona to the tutor
    instructor_prompt = gr.Textbox(label="Verify your prompt content", value = os.environ.get("SECRET_PROMPT"), visible=False)
    
    # Placeholders components
    text_input_none = gr.Textbox(visible=False)
    file_input_none = gr.File(visible=False)
    instructor_input_none = gr.TextArea(visible=False)
    learning_objectives_none = gr.Textbox(visible=False)

    # Initialize situation with API key so no click is necessary
    study_tutor = initialize_mdl_wrapper(study_tutor, api_input.value)

    with gr.Row(equal_height=True):
        with gr.Column(scale=2):
            chatbot = gr.Chatbot()
            with gr.Row():
                user_chat_input = gr.Textbox(label="User input", scale=9)
                user_chat_submit = gr.Button("Ask/answer model", scale=1)

    # First add user's message to the conversation history
    # Then get reply from the tutor and add that to the conversation history
    user_chat_submit.click(
        fn = add_user_message, inputs = [user_chat_input, study_tutor], outputs = [user_chat_input, chatbot, study_tutor], queue=False
    ).then(
        fn = get_tutor_reply, inputs = [study_tutor], outputs = [user_chat_input, chatbot, study_tutor], queue=True
    )

    user_chat_input.submit(
        fn = add_user_message, inputs = [user_chat_input, study_tutor], outputs = [user_chat_input, chatbot, study_tutor], queue=False
    ).then(
        fn = get_tutor_reply, inputs = [study_tutor], outputs = [user_chat_input, chatbot, study_tutor], queue=True
    )

    # Download conversation history file
    with gr.Box():
        gr.Markdown("""
        ## Export Your Chat History
        Export your chat history as a .json, .txt, or .csv file
        """)
        with gr.Row():
            export_dialogue_button_json = gr.Button("JSON")
            export_dialogue_button_txt = gr.Button("TXT")
            export_dialogue_button_csv = gr.Button("CSV")
    
        file_download = gr.Files(label="Download here", file_types=['.json', '.txt', '.csv'], type="file", visible=False)
    
    export_dialogue_button_json.click(save_json, study_tutor, file_download, show_progress=True)
    export_dialogue_button_txt.click(save_txt, study_tutor, file_download, show_progress=True)
    export_dialogue_button_csv.click(save_csv, study_tutor, file_download, show_progress=True)
